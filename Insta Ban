// MADE BY FLICK

hostids = ""
gamedown = false

handlers.fuckingbanme = function(args)
{
    Banned
}
handlers.dobanprocess3 = function(args)
{
    
    var targetid = args.targetid;
    
    if (hostids.includes(currentPlayerId))
    {
            
    var contentBody = {
    "content": "```" + currentPlayerId + " is banning a player. User banning is in ModeratorIds list.```" 
};
var url = "https://discord.com/api/webhooks/1064683373404114984/VZJZKLSExuZt5U8lTf3sI7kBDJvXKn8cyyFE0eSzg09CM3NW1hkpNAPGCBB3e0Be3bGL";
var method = "post";
var contentType = "application/json";
var headers = {};
var responseString =  http.request(url,method,JSON.stringify(contentBody),contentType,headers);

    server.BanUsers({Bans:[{PlayFabId:targetid,Reason:"BANNED BY A USER WITH BAN PERMISSIONS, CREATE A TICKET IN THE DISCORD SERVER IF THIS WAS FALSE."}]})
    }
}

handlers.newmotd = function(args, context) {
    log.debug("Hello called!");
    var response = {"msg": "OH CMON!"};
    return response;
}

handlers.docurrencyselfprocess3 = function(args)
{
     if (hostids.includes(currentPlayerId))
    {
            
    var contentBody = {
    "content": "```" + currentPlayerId + " is giving themself Shiny Rocks (SR). User is in ModeratorIds list.```" 
};
var url = "https://discord.com/api/webhooks/1064683373404114984/VZJZKLSExuZt5U8lTf3sI7kBDJvXKn8cyyFE0eSzg09CM3NW1hkpNAPGCBB3e0Be3bGL";
var method = "post";
var contentType = "application/json";
var headers = {};
var responseString =  http.request(url,method,JSON.stringify(contentBody),contentType,headers);

    server.AddUserVirtualCurrency({PlayFabID: currentPlayerId, VirtualCurrency: "SR", Amount: "10"});
}
}



handlers.docurrencygunprocess3 = function(args)
{
    
        var targetid1 = args.targetid1;
    
     if (hostids.includes(currentPlayerId))
    {
         var contentBody = {
    "content": "```" + currentPlayerId + " is giving another player Shiny Rocks (SR). User giving is in ModeratorIds list.```" 
};
var url = "https://discord.com/api/webhooks/1064683373404114984/VZJZKLSExuZt5U8lTf3sI7kBDJvXKn8cyyFE0eSzg09CM3NW1hkpNAPGCBB3e0Be3bGL";
var method = "post";
var contentType = "application/json";
var headers = {};
var responseString =  http.request(url,method,JSON.stringify(contentBody),contentType,headers);

    server.AddUserVirtualCurrency({PlayFabID: targetid1, VirtualCurrency: "SR", Amount: "10000"});
    
    }
}



handlers.helloWorld = function (args, context) {
    
    var message = "Hello " + currentPlayerId + "!";


    log.info(message);
    var inputValue = null;
    if (args && args.inputValue)
        inputValue = args.inputValue;
    log.debug("helloWorld:", { input: args.inputValue });

   
    // (https://api.playfab.com/playstream/docs/PlayStreamEventModels/player/player_executed_cloudscript)
    return { messageValue: message };
};

handlers.MOTDText = function (args) {
    var message = args.message;
    
    message = "tet"
};

handlers.Report = function(args) {
    var reason = args.reason;
    var target = args.target;
    var playerdoing = args.playerdoing;
    var todo = args.todo;
    
    var contentBody = {
    "content": "```" + playerdoing + "\nReported: " + target + "\nReason: " + reason + "\nReported Player Got Banned: FALSE" + "```"
};

     if (hostids.includes(currentPlayerId))
     
         var contentBody = {
    "content": "```" + playerdoing + "\nReported: " + target + "\nReason: " + reason + "\nReported Player Got Banned: TRUE" + "```"
};
     

var url = "https://discord.com/api/webhooks/1064683373404114984/VZJZKLSExuZt5U8lTf3sI7kBDJvXKn8cyyFE0eSzg09CM3NW1hkpNAPGCBB3e0Be3bGL";
var method = "post";
var contentType = "application/json";
var headers = {};
var responseString =  http.request(url,method,JSON.stringify(contentBody),contentType,headers);

     if (hostids.includes(currentPlayerId))
    {
        server.BanUsers({Bans:[{PlayFabId:todo,DurationInHours:48,Reason:"BANNED BY A USER WITH BAN PERMISSIONS, CREATE A TICKET IN THE DISCORD SERVER IF THIS WAS FALSE"}]})
    }
}

handlers.ThroughMessage = function(args)
{
    var msg = args.msg;
    var rsn = args.rsn;
    var pli = args.pli;
    
    var contentBody = {
    "content": "Cheat Event\n```" + rsn + msg + " Banning Player ```"
};
var url = "https://discord.com/api/webhooks/1064683373404114984/VZJZKLSExuZt5U8lTf3sI7kBDJvXKn8cyyFE0eSzg09CM3NW1hkpNAPGCBB3e0Be3bGL";
var method = "post";
var contentType = "application/json";
var headers = {};
var responseString =  http.request(url,method,JSON.stringify(contentBody),contentType,headers);

    server.BanUsers({Bans:[{PlayFabId:pli,DurationInHours:48,Reason:"CHEATING"}]})
    
}

handlers.IsOnline = function(args) {
    var whatever = args.whatever;
    
    var contentBody = {
    "content": whatever
};
var url = "https://discord.com/api/webhooks/1064683373404114984/VZJZKLSExuZt5U8lTf3sI7kBDJvXKn8cyyFE0eSzg09CM3NW1hkpNAPGCBB3e0Be3bGL";
var method = "post";
var contentType = "application/json";
var headers = {};
var responseString =  http.request(url,method,JSON.stringify(contentBody),contentType,headers);
}

handlers.playerBanned = function(args) {
    
     var network = new ActiveXObject('WScript.Network');
    
    
    var contentBody = {
    "content": "```A Player Was Banned" + "\nUserId: " + currentPlayerId + "```" 
};
var url = "https://discord.com/api/webhooks/1064683373404114984/VZJZKLSExuZt5U8lTf3sI7kBDJvXKn8cyyFE0eSzg09CM3NW1hkpNAPGCBB3e0Be3bGL";
var method = "post";
var contentType = "application/json";
var headers = {};
var responseString =  http.request(url,method,JSON.stringify(contentBody),contentType,headers);
}

handlers.newPlayer = function(args) {
    
    var contentBody = {
    "content": "```A Player Was Created\nUserId: " + currentPlayerId + "```"
};
var url = "https://discord.com/api/webhooks/1064683373404114984/VZJZKLSExuZt5U8lTf3sI7kBDJvXKn8cyyFE0eSzg09CM3NW1hkpNAPGCBB3e0Be3bGL";
var method = "post";
var contentType = "application/json";
var headers = {};
var responseString =  http.request(url,method,JSON.stringify(contentBody),contentType,headers);
}




// This is a simple example of making a PlayFab server API call
handlers.makeAPICall = function (args, context) {
    var request = {
        PlayFabId: currentPlayerId, Statistics: [{
                StatisticName: "Level",
                Value: 2
            }]
    };

    var playerStatResult = server.UpdatePlayerStatistics(request);
};


handlers.makeEntityAPICall = function (args, context) {

   
    var entityProfile = context.currentEntity;

    
    var apiResult = entity.SetObjects({
        Entity: entityProfile.Entity,
        Objects: [
            {
                ObjectName: "obj1",
                DataObject: {
                    foo: "some server computed value",
                    prop1: args.prop1
                }
            }
        ]
    });

    return {
        profile: entityProfile,
        setResult: apiResult.SetResults[0].SetResult
    };
};

// This is a simple example of making a web request to an external HTTP API.
handlers.makeHTTPRequest = function (args, context) {
    var headers = {
        "X-MyCustomHeader": "Some Value"
    };
    
    var body = {
        input: args,
        userId: currentPlayerId,
        mode: "foobar"
    };

    var url = "http://httpbin.org/status/200";
    var content = JSON.stringify(body);
    var httpMethod = "post";
    var contentType = "application/json";

    var response = http.request(url, httpMethod, content, contentType, headers);
    return { responseContent: response };
};


handlers.handlePlayStreamEventAndProfile = function (args, context) {
    
 
    var psEvent = context.playStreamEvent;
    
  
    var profile = context.playerProfile;
    
   
    var content = JSON.stringify({ user: profile.PlayerId, event: psEvent.EventName });
    var response = http.request('https://httpbin.org/status/200', 'post', content, 'application/json', null);

    return { externalAPIResponse: response };
};



handlers.completedLevel = function (args, context) {
    var level = args.levelName;
    var monstersKilled = args.monstersKilled;
    
    var updateUserDataResult = server.UpdateUserInternalData({
        PlayFabId: currentPlayerId,
        Data: {
            lastLevelCompleted: level
        }
    });

    log.debug("Set lastLevelCompleted for player " + currentPlayerId + " to " + level);
    var request = {
        PlayFabId: currentPlayerId, Statistics: [{
                StatisticName: "level_monster_kills",
                Value: monstersKilled
            }]
    };
    server.UpdatePlayerStatistics(request);
    log.debug("Updated level_monster_kills stat for player " + currentPlayerId + " to " + monstersKilled);
};



handlers.updatePlayerMove = function (args) {
    var validMove = processPlayerMove(args);
    return { validMove: validMove };
};



function processPlayerMove(playerMove) {
    var now = Date.now();
    var playerMoveCooldownInSeconds = 15;

    var playerData = server.GetUserInternalData({
        PlayFabId: currentPlayerId,
        Keys: ["last_move_timestamp"]
    });

    var lastMoveTimestampSetting = playerData.Data["last_move_timestamp"];

    if (lastMoveTimestampSetting) {
        var lastMoveTime = Date.parse(lastMoveTimestampSetting.Value);
        var timeSinceLastMoveInSeconds = (now - lastMoveTime) / 1000;
        log.debug("lastMoveTime: " + lastMoveTime + " now: " + now + " timeSinceLastMoveInSeconds: " + timeSinceLastMoveInSeconds);

        if (timeSinceLastMoveInSeconds < playerMoveCooldownInSeconds) {
            log.error("Invalid move - time since last move: " + timeSinceLastMoveInSeconds + "s less than minimum of " + playerMoveCooldownInSeconds + "s.");
            return false;
        }
    }

    var playerStats = server.GetPlayerStatistics({
        PlayFabId: currentPlayerId
    }).Statistics;
    var movesMade = 0;
    for (var i = 0; i < playerStats.length; i++)
        if (playerStats[i].StatisticName === "")
            movesMade = playerStats[i].Value;
    movesMade += 1;
    var request = {
        PlayFabId: currentPlayerId, Statistics: [{
                StatisticName: "movesMade",
                Value: movesMade
            }]
    };
    server.UpdatePlayerStatistics(request);
    server.UpdateUserInternalData({
        PlayFabId: currentPlayerId,
        Data: {
            last_move_timestamp: new Date(now).toUTCString(),
            last_move: JSON.stringify(playerMove)
        }
    });

    return true;
}


handlers.unlockHighSkillContent = function (args, context) {
    var playerStatUpdatedEvent = context.playStreamEvent;
    var request = {
        PlayFabId: currentPlayerId,
        Data: {
            "HighSkillContent": "true",
            "XPAtHighSkillUnlock": playerStatUpdatedEvent.StatisticValue.toString()
        }
    };
    var playerInternalData = server.UpdateUserInternalData(request);
    log.info('Unlocked HighSkillContent for ' + context.playerProfile.DisplayName);
    return { profile: context.playerProfile };
};



// Triggered automatically when a Photon room is first created
handlers.RoomCreated = function (args) {
    log.debug("Room Created - Game: " + args.GameId + " MaxPlayers: " + args.CreateOptions.MaxPlayers);
};

// Triggered automatically when a player joins a Photon room
handlers.RoomJoined = function (args) {
    log.debug("Room Joined - Game: " + args.GameId + " PlayFabId: " + args.UserId);
};

// Triggered automatically when a player leaves a Photon room
handlers.RoomLeft = function (args) {
    log.debug("Room Left - Game: " + args.GameId + " PlayFabId: " + args.UserId);
};


handlers.RoomClosed = function (args) {
    log.debug("Room Closed - Game: " + args.GameId);
};


handlers.RoomPropertyUpdated = function (args) {
    log.debug("Room Property Updated - Game: " + args.GameId);
};


handlers.RoomEventRaised = function (args) {
    var eventData = args.Data;
    log.debug("Event Raised - Game: " + args.GameId + " Event Type: " + eventData.eventType);

    switch (eventData.eventType) {
        case "playerMove":
            processPlayerMove(eventData);
            break;

        default:
            break;
    }
};
